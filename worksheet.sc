// #1

// your code goes here
//val w = "GHMABGZ VKXTMXL LNVVXLL EBDX GHG-LMHI, XGMANLBTLMBV XYYHKM"
val word: String = "GHMABGZVKXTMXLLNVVXLLEBDXGHGLMHIXGMANLBTLMBVXYYHKM"
val abc = List('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')
val dic: Map[Char, Int] = (abc zip (0 to 25).toList).toMap
val drev = for((a,b) <- dic) yield (b,a)

def encrypt(k:Int, pt: String):String ={
  for(l <- pt) yield drev((dic(l) + k)%26)
}
def decrypt(ct: String):List[String] = {
  (for(i<- 1 to 25) yield encrypt(i, ct)).toList
}
val check = decrypt(word)
val Key: Int = 7
val PlainWordIs = "NOTHINGCREATESSUCCESSLIKENONSTOPENTHUSIASTICEFFORT"
println(s"#1 - ${}")

// #2

// your code goes here
val a
val a2 = "0010101010101111001010000000000000001010010100111000010000000010100001010101000000110000001010101000000000000101001111100000000000010010101010000001"
//val temp = Integer.parseInt(a1,10)
val b1 = a1.toList.reverse
val b2 = a2.toList.reverse
val b1short = b1 take b2.length
def add(a1:List[Int], a2:List[Int]) ={

}
println(s"#2 - ${/*answer #2*/}")

// #3

// your code goes here

println(s"#3 - ${/*answer #3*/}")

// #4

// your code goes here

println(s"#4 - ${/*answer #4*/}")

// #5

// your code goes here

println(s"#5 - ${/*answer #5*/}")